
1. Create a IAM role: https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html#create-service-role
2. Create two subnets in different AZ
3. Create EKS https://us-east-2.console.aws.amazon.com/eks/home
4. Create a IAM role for node group: EC2-->permission:AmazonEKS_CNI_Policy AmazonEKSWorkerNodePolicy AmazonEC2ContainerRegistryFullAccess
5. Create a nodegroup from "Compute" of EKS cluster
6. Create a user to login AWS CLI
7. Install kubectl to the laptop, e.g. MacOS
curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.23.6/bin/darwin/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl
8. Check the running nodes from CLI
aws eks --region us-east-2 update-kubeconfig --name eliaseks
#begin
Added new context arn:aws:eks:us-east-2:085825898815:cluster/ekscluster to /Users/eliassun/.kube/config
#end

kubectl get nodes or kubectl get nodes --watch
# result sample begin
NAME                                        STATUS   ROLES    AGE   VERSION
ip-10-11-1-192.us-east-2.compute.internal   Ready    <none>   71m   v1.24.7-eks-fb459a0
ip-10-11-2-40.us-east-2.compute.internal    Ready    <none>   71m   v1.24.7-eks-fb459a0
#end
9. Deploy a service 
# Read https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
# Sample: https://github.com/javahometech/kubernetes/tree/master/pods


# Another Sample
#Begin
# create a sample to deploy
vim myservice.yml
#begin
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: webapp
  name: webapp
spec:
  replicas: 2
  selector:
    matchLabels:
      app: webapp
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: webapp
    spec:
      containers:
      - image: public.ecr.aws/b5c5s7l4/adityaprakash2811/nodek8:latest
        name: webapp
        imagePullPolicy: Always
        resources: {}
        ports:
          - containerPort: 3080 
status: {}

---

apiVersion: v1
kind: Service
metadata:
  name: webapp
  labels:
    run: webapp
spec:
  ports:
  - port: 3080
    protocol: TCP
  selector:
    app: webapp
  type: NodePort
#end

kubectl create -f myservice.yml 
#begin
deployment.apps/webapp created
service/webapp created
#end

#check
kubectl get svc
#begin
NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
kubernetes   ClusterIP   172.20.0.1      <none>        443/TCP          166m
webapp       NodePort    172.20.112.52   <none>        3080:32236/TCP   54s
#end

kubectl get deploy
# begin
NAME     READY   UP-TO-DATE   AVAILABLE   AGE
webapp   0/2     2            0           106s
#end

kubectl get pods
#begin
NAME                      READY   STATUS             RESTARTS   AGE
webapp-765f9bc79b-h78rz   0/1     ImagePullBackOff   0          2m17s
webapp-765f9bc79b-mw97v   0/1     ImagePullBackOff   0          2m17s
#end

kubectl describe pods/webapp-765f9bc79b-h78rz

kubectl get nodes -o wide |  awk {'print $1" " $2 " " $7'} | column -t
#begin
NAME                                       STATUS  EXTERNAL-IP
ip-10-11-1-241.us-east-2.compute.internal  Ready   18.118.199.209
ip-10-11-2-100.us-east-2.compute.internal  Ready   3.15.235.163
(base) Elias-Home-Mac:kubectl eliassun$ 
#end

kubectl exec -it nodeapp bash
# Run wget 172.20.112.52:8080, which will get the page

# Expose by lb
kubectl patch svc nodeapp -p '{"spec": {"type":"LoadBalancer"}}'

(base) Elias-Home-Mac:kubectl eliassun$ kubectl get svc nodeapp
#begin
NAME      TYPE           CLUSTER-IP       EXTERNAL-IP                                                               PORT(S)          AGE
nodeapp   LoadBalancer   172.20.165.172   a5312a38ef1fe4899b93562203e6e2e1-1840692725.us-east-2.elb.amazonaws.com   8080:30296/TCP   36m
#end
# visit http://a5312a38ef1fe4899b93562203e6e2e1-1840692725.us-east-2.elb.amazonaws.com:8080



#end



