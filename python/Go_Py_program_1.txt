Sever Development mixed with Go and Python - 1. Go calls Py
Author: Elias Sun
Date: Feb. 3, 2022

1. Go calls Python, then Python uses the stdout to return results to Go
In Go:

package main

import (
        "bytes"
        "encoding/json"
        "fmt"
        "os/exec"
        "strings"

        "go.uber.org/zap"
)

type ResultFromPy struct {
        MsgType string `json:"msg_type"`
        Param1  string `json:"param1"`
        Param2  string `json:"param2"`
}

func main() {
        // Set log
        logger, _ := zap.NewProduction()
        defer logger.Sync()

        // Send msg from Go to Python
        var outBuf, errBuf bytes.Buffer
        cmdName := "python"
        args := []string{"Go_Py_program_1.py", "cmd_req_do_something", "input1", "input2"}
        cmd := exec.Command(cmdName, args...)
        cmd.Stdout = &outBuf
        cmd.Stderr = &errBuf
        err := cmd.Run()

        if err != nil {
                logger.Error(
                        "Error for ",
                        zap.String("cmd", cmdName),
                        zap.Strings("args", args),
                        zap.String("stdout", outBuf.String()),
                        zap.String("stderr", errBuf.String()),
                        zap.Error(err))
        }

        // Receive msg from Python
        resultFromPy := ResultFromPy{}
        if err := json.Unmarshal([]byte(strings.TrimSpace(outBuf.String())), &resultFromPy); err != nil {

                logger.Error(
                        "Failed to receive results from Pyscript",
                        zap.String("cmd", cmdName),
                        zap.Strings("args", args),
                        zap.String("stdout", outBuf.String()),
                        zap.String("stderr", errBuf.String()),
                        zap.Error(err))

        }
        fmt.Println("stdout:", outBuf.String())
        fmt.Println("MsgType:", resultFromPy.MsgType)
        fmt.Println("Param1:", resultFromPy.Param1)
        fmt.Println("Param2:", resultFromPy.Param2)
}


In Python:


# !/usr/bin/env python

import argparse
import json
import sys
import logging

LOG = logging.getLogger(__name__)

LOG_FILE_NAME = "/tmp/my_go_py_test.log"

CMD_GO_TO_PYTHON = 'cmd_req_do_something'
RESULT_GO_TO_PYTHON = 'result_req_do_something'


def get_result_for_req_from_go(input1, input2):
    LOG.info('handle req 1st input: %s', input1)
    LOG.info('handle req 2nd input: %s', input2)
    return json.dumps({
        'msg_type': RESULT_GO_TO_PYTHON,
        'param1': '{} from Go back to py'.format(input1),
        'param2': '{} from Go back to py'.format(input2)
    })


def get_parser():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    parser_req_from_go = subparsers.add_parser(CMD_GO_TO_PYTHON)
    parser_req_from_go.add_argument('input1', help='1st input')
    parser_req_from_go.add_argument('input2', help='2nd input')
    parser_req_from_go.set_defaults(func=lambda o: get_result_for_req_from_go(o.input1, o.input2))
    return parser


def parse_args(args=None):
    reqs = get_parser().parse_args(args=args)
    return reqs


def main(reqs=None):
    return reqs.func(reqs)


if __name__ == '__main__':
    LOG.progagte = False
    logging.basicConfig(level=logging.INFO, filename=LOG_FILE_NAME, datefmt='%H:%M:%S',
                        format="[%(asctime)s %(filename)s:%(lineno)d %(levelname).1s]  %(message)s")
    print(main(parse_args()))
    sys.exit(0)

Then run the "go run go_src.go". If it hits something weird to run Go, then it can set a tmp GOPATH to run by
- Open one terminal, then go the go_src.go folder
- export GOPATH=path_to_go_src
- export GO111MODULE=auto
- mkdir src; cd src
- ln mod under src, e.g. ln -s  /Users/eliassun/go/pkg/mod/go.uber.org .

The output sould be:
stdout: {"msg_type": "result_req_do_something", "param1": "input1 from Go back to py", "param2": "input2 from Go back to py"}

MsgType: result_req_do_something
Param1: input1 from Go back to py
Param2: input2 from Go back to py
