# Langchain: https://www.youtube.com/watch?v=1bUy-1hGZpI
https://segmentfault.com/a/1190000044836695
# run llama3
ollama run llama3
#run the source code:

from langchain_community.document_loaders import TextLoader
from langchain.text_splitter import CharacterTextSplitter
from langchain_community.embeddings import OllamaEmbeddings
import weaviate
from weaviate.embedded import EmbeddedOptions
from langchain.prompts import ChatPromptTemplate
from langchain_community.chat_models import ChatOllama
from langchain.schema.runnable import RunnablePassthrough
from langchain.schema.output_parser import StrOutputParser
from langchain_community.vectorstores import Weaviate
import requests
# download the content
url = "your url"
res = requests.get(url)
with open("state_of_the_union.txt", "w") as f:
    f.write(res.text)
#load the content
loader = TextLoader('./state_of_the_union.txt')
documents = loader.load()

# split the content
text_splitter = CharacterTextSplitter(chunk_size=500, chunk_overlap=50)
chunks = text_splitter.split_documents(documents)
# get the content
client = weaviate.Client(
    embedded_options=EmbeddedOptions()
)
vectorstore = Weaviate.from_documents(
    client=client,
    documents=chunks,
    embedding=OllamaEmbeddings(model="llama3"),
    by_text=False
)

# searcher
retriever = vectorstore.as_retriever()

# LLM template
template = """You are an assistant for question-answering tasks.
   Use the following pieces of retrieved context to answer the question.
   If you don't know the answer, just say that you don't know.
   Use three sentences maximum and keep the answer concise.
   Question: {question}
   Context: {context}
   Answer:
   """
prompt = ChatPromptTemplate.from_template(template)
llm = ChatOllama(model="llama3", temperature=10)
rag_chain = (
        {"context": retriever, "question": RunnablePassthrough()}
        | prompt
        | llm
        | StrOutputParser()
)
# search
query = "your question"
print(rag_chain.invoke(query))


