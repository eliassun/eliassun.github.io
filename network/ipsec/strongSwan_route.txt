
# Route traffic over IPSec

# Route the traffic from site1(172.16.1.0/24) to site2(10.10.1.0/24), then to 10.10.2.0/24
sudo sysctl -w net.ipv4.ip_forward=1
sudo iptables -t nat -A POSTROUTING -s 172.16.10.0/24 -j MASQUERADE
# OR
sudo iptables -t nat -A POSTROUTING  -s 172.16.1.100 -d 10.10.2.0/24 -o eth0 -j MASQUERADE

# Check if rulres are expected by
sudo iptables -S (or -L)
sudo iptables -t nat -S


#OR:
sudo sysctl -w net.ipv4.ip_forward=1
sudo iptables -t nat -A POSTROUTING -d 192.168.10.13 -j MASQUERADE

# If it needs to route the remote access VPN(user vpn) to site to site vpn, the leftsubnets should be overlapped. In the client side, it needs to make the routes correct too, e.g.  sudo route -n add -net 10.10.0.0/16 ipsec_virtual_ip


# Optional: Set up the virtual network interface for the route-based VPN e.g. gre/vti interface
Box1:
sudo sysctl -w net.ipv4.ip_forward=1
sudo ip tunnel add gre1 mode gre local 10.10.1.100 remote 10.10.2.137 ttl 255
sudo ip link set gre1 up
sudo ip addr add 10.10.1.101 peer 10.10.2.138 dev gre1

Box2:
sudo sysctl -w net.ipv4.ip_forward=1
sudo ip tunnel add gre1 mode gre remote 10.10.1.100 local 10.10.2.137 ttl 255
sudo ip link set gre1 up
sudo ip addr add 10.10.2.138 peer  10.10.1.101 dev gre1
sudo ip route add 172.168.1.0/24 dev gre1
ping -I gre1 10.10.1.101
ping -I gre1 172.168.1.100
ping -I gre1 10.10.1.100

# If it cannot access any element from the Internet, then check 1) SG 2)route table

# Note:
The virtual interface can be used to implement routing features. It has many ways to create it. Here is another example:
sudo ip link add name app type dummy
sudo ip addr add 172.16.1.102 dev app
sudo ip link set app up
# ping 172.16.1.102 should work

# Configure the firewall. ufw is good too, but disable ufw and use iptables to make the configuration flexible. 
# It recommends to use the custom iptables chain to set the new remote vpn rules. e.g. We can create a new chain "remotevpn".
# However, this text is for the demo purpose, then INPUT chain is good enough for a demo.
# begin
iptables -A INPUT -p udp --dport 500 -j ACCEPT
iptables -A INPUT -p udp --dport 4500 -j ACCEPT
## For openvpn and https
iptables -A INPUT -p tcp --dport 443 -j ACCEPT
## Optional, allow http
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
## Optional, allow ssh from your laptop only
iptables -A INPUT -s your_public_IP -p tcp --dport 22  -j ACCEPT
## Optional, only allow from ping from your laptop. Remove "-s your_public_ip" for all IPs.
iptables -A INPUT -s your_public_ip -p icmp -j ACCEPT

iptables -A INPUT -p udp --sport 53 -j ACCEPT
iptables -A INPUT -p udp --dport 53 -j ACCEPT
iptables -A OUTPUT -p udp --sport 53 -j ACCEPT
iptables -A OUTPUT -p udp --dport 53 -j ACCEPT
iptables -A INPUT -s 127.0.0.1 -p tcp --dport 27017 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT  -s 127.0.0.1 -p tcp --sport 27017 -m state --state ESTABLISHED -j ACCEPT
iptables -A INPUT -s 127.0.0.1 -p tcp --dport 11211 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT  -s 127.0.0.1 -p tcp --sport 11211 -m state --state ESTABLISHED -j ACCEPT

iptables -A INPUT -j DROP

# Persist the rules by:  
# sudo apt install iptables-persistent 
# sudo iptables-save > /etc/iptables/rules.v4
# end



